if (typeof File === "undefined") {
  global.File = class File extends Blob {
    constructor(chunks, filename, options = {}) {
      super(chunks, options);
      this.name = filename;
      this.lastModified = options.lastModified || Date.now();
    }
  };
}

const fs = require("fs");
const path = require("path");
const os = require("os");
const ytdl = require("@distube/ytdl-core");
const ffmpeg = require("fluent-ffmpeg");
const readline = require("readline");
const { spawnSync } = require("child_process");

// Tr·ªè t·ªõi ffmpeg.exe trong c√πng th∆∞ m·ª•c v·ªõi app
const ffmpegPath = path.join(process.cwd(), "ffmpeg.exe");
ffmpeg.setFfmpegPath(ffmpegPath);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
const outputDir = path.join(process.cwd(), "output");
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir);
}

// H√†m x·ª≠ l√Ω t·∫£i video
async function downloadVideo(url) {
  try {
    if (!ytdl.validateURL(url)) {
      console.log("‚ùå Link kh√¥ng h·ª£p l·ªá!\n");
      return;
    }

    console.log("‚è≥ ƒêang l·∫•y th√¥ng tin video...");
    const info = await ytdl.getBasicInfo(url);
    let title = info.videoDetails.title.replace(/[\\/:*?"<>|]/g, ""); // xo√° k√Ω t·ª± c·∫•m
    const videoFile = path.join(outputDir, "video_temp.mp4");
    const audioFile = path.join(outputDir, "audio_temp.mp3");
    const outputFile = path.join(outputDir, `${title}.mp4`);

    console.log("‚è≥ ƒêang t·∫£i video stream...");
    await new Promise((resolve) => {
      ytdl(url, { quality: "highestvideo" })
        .pipe(fs.createWriteStream(videoFile))
        .on("finish", resolve);
    });
    console.log("‚úÖ Video t·∫£i xong.");

    console.log("‚è≥ ƒêang t·∫£i audio stream...");
    await new Promise((resolve) => {
      ytdl(url, { filter: "audioonly", quality: "highestaudio" })
        .pipe(fs.createWriteStream(audioFile))
        .on("finish", resolve);
    });
    console.log("‚úÖ Audio t·∫£i xong.");

    console.log("‚è≥ ƒêang merge b·∫±ng ffmpeg...");
    await new Promise((resolve, reject) => {
      ffmpeg()
        .input(videoFile)
        .input(audioFile)
        .outputOptions("-c copy")
        .save(outputFile)
        .on("end", resolve)
        .on("error", reject);
    });

    console.log(`‚úÖ Xu·∫•t file ho√†n ch·ªânh: ${outputFile}`);

    fs.unlinkSync(videoFile);
    fs.unlinkSync(audioFile);
    console.log("üóëÔ∏è ƒê√£ xo√° file t·∫°m.\n");
  } catch (err) {
    console.error("‚ùå L·ªói:", err.message, "\n");
  }
}

// H√†m v√≤ng l·∫∑p menu
function mainMenu() {
  rl.question(
    "üëâ Nh·∫≠p link YouTube (ho·∫∑c g√µ 'exit' ƒë·ªÉ tho√°t): ",
    async (url) => {
      if (url.toLowerCase() === "exit") {
        console.log("üëã Tho√°t ·ª©ng d·ª•ng.");
        rl.close();
        return;
      }
      await downloadVideo(url);
      mainMenu(); // quay l·∫°i menu
    }
  );
}

// Start
console.log("=== YouTube Downloader (All-in-one) ===\n");
mainMenu();
